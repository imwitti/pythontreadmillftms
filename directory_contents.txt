Directory structure and file contents of: C:\Users\mzh\OneDrive - Danaher\Documents\TreadmillApps\Library\Pillarsapp

[File] RoutineSender.py
--- Start of RoutineSender.py ---
# Set correct event loop policy for Bleak on Windows BEFORE any imports
import sys
import asyncio

if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import json
import os
import random
import pygame
from RunRoutine import exercise_routine
from zwo_parser import load_all_zwo_routines

def load_routines(file_path):
    try:
        with open(file_path, 'r') as file:
            routines = json.load(file)
        print("Routines loaded successfully.")
        return routines
    except Exception as e:
        print(f"Error loading routines: {e}")
        return {}

def adjust_routine(initial_speed, routine):
    return [(duration, initial_speed + speed_increment) for duration, speed_increment in routine]

async def send_routines(routine, initial_speed, video_path, music_folder):
    adjusted_routine = adjust_routine(initial_speed, routine)
    print(f"Starting routine with initial speed: {initial_speed}")
    play_music(music_folder)
    await exercise_routine(initial_speed, adjusted_routine, video_path)
    print(f"Completed routine with initial speed: {initial_speed}")

def load_user_config(config_path='user_config.json'):
    try:
        with open(config_path, 'r') as file:
            return json.load(file)
    except Exception as e:
        print(f"Error loading user config: {e}")
        return {}

def list_videos(video_folder):
    videos = []
    for file in os.listdir(video_folder):
        if file.lower().endswith('.mp4'):
            name, speed, distance = parse_video_title(file)
            videos.append((file, name, float(speed), float(distance)))
    return videos

def parse_video_title(title):
    base_name = os.path.splitext(title)[0]
    parts = base_name.split('_')
    race_name = parts[0].lower()
    video_speed = parts[1]
    distance = parts[2]
    return race_name, video_speed, distance

def display_videos(videos):
    print("Available videos:")
    for i, (file, name, speed, distance) in enumerate(videos, start=1):
        print(f"{i}. {name.capitalize()} - Speed: {speed} km/h, Distance: {distance} km")

def display_routines(routines):
    print("Available routines:")
    for i, name in enumerate(routines.keys(), start=1):
        print(f"{i}. {name}")

def play_music(music_folder):
    pygame.mixer.init()
    music_files = [file for file in os.listdir(music_folder) if file.lower().endswith('.mp3')]
    if music_files:
        selected_music = random.choice(music_files)
        pygame.mixer.music.load(os.path.join(music_folder, selected_music))
        pygame.mixer.music.play()
        print(f"Playing music: {selected_music}")
    else:
        print("No music files found in the folder.")

if __name__ == "__main__":
    # Load user config and calculate initial speed for ZWO routines
    user_config = load_user_config()
    pb_minutes = user_config.get("best_5k_time_minutes", 25.0)
    zwo_initial_speed = (5 * 60) / pb_minutes
    print(f"Using initial speed for ZWO routines based on 5K PB: {zwo_initial_speed:.2f} km/h")

    # Load routines
    json_routines = load_routines('routines.json')
    zwo_routines = load_all_zwo_routines('routines', zwo_initial_speed)

    # Merge routines
    routines = {**json_routines, **zwo_routines}

    display_routines(routines)
    routine_selection = int(input("Enter the number of the routine you want to run: "))
    selected_routine_name = list(routines.keys())[routine_selection - 1]

    video_folder = 'videos'
    videos = list_videos(video_folder)
    display_videos(videos)
    video_selection = int(input("Enter the number of the video you want to use: "))
    selected_video = videos[video_selection - 1]
    video_path = os.path.join(video_folder, selected_video[0])

    music_folder = 'music'
    if selected_routine_name in zwo_routines:
        initial_speed = zwo_initial_speed
    else:
        initial_speed = float(input("Enter the initial speed for this routine: "))

    if selected_routine_name in routines:
        selected_routine = routines[selected_routine_name]
        asyncio.run(send_routines(selected_routine, initial_speed, video_path, music_folder))
    else:
        print("Invalid routine name.")
--- End of RoutineSender.py ---

[File] RunRoutine.py
--- Start of RunRoutine.py ---
import asyncio
from treadmill_control import TreadmillControl, parse_treadmill_data
from video_playback import play_video
import queue
import time
from datetime import datetime
import xml.etree.ElementTree as ET

async def exercise_routine(initial_speed, routine, video_path):
    treadmill = TreadmillControl()  # Set testing=True here for test mode
    await treadmill.connect()
    await treadmill.request_control()
    await asyncio.sleep(10)
    await treadmill.set_incline(1.0)

    speed_ratio_queue = queue.Queue()
    speed_ratio_queue.put(1.0)
    speed_queue = queue.Queue()
    speed_queue.put(initial_speed)
    distance_queue = queue.Queue()
    distance_queue.put(0.0)

    start_time = time.time()
    workout_data = []

    def callback(sender, data):
        speed, distance, incline = parse_treadmill_data(data)
        print(f"Speed: {speed:.2f} km/h, Distance: {distance:.2f} km, Incline: {incline:.2f} %")
        speed_ratio = speed / initial_speed if initial_speed > 0 else 1.0
        speed_ratio_queue.put(speed_ratio)
        speed_queue.put(speed)
        distance_queue.put(distance)

        workout_data.append({
            "timestamp": datetime.utcnow(),
            "speed": speed,
            "distance": distance,
            "incline": incline
        })

    # Start monitoring treadmill data first
    await treadmill.start_monitoring(callback)

    # THEN start video playback (after treadmill is ready)
    video_task = asyncio.create_task(
        play_video(video_path, speed_ratio_queue, speed_queue, distance_queue, start_time)
    )

    for duration, speed_increment in routine:
        await treadmill.set_speed(speed_increment)
        await asyncio.sleep(duration * 60)

    await treadmill.stop_monitoring()
    await treadmill.disconnect()
    await video_task

    generate_tcx_file(workout_data)

def generate_tcx_file(workout_data):
    import xml.etree.ElementTree as ET
    import os

    root = ET.Element("TrainingCenterDatabase", xmlns="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")
    activities = ET.SubElement(root, "Activities")
    activity = ET.SubElement(activities, "Activity", Sport="Running")
    ET.SubElement(activity, "Id").text = workout_data[0]["timestamp"].isoformat()

    lap = ET.SubElement(activity, "Lap", StartTime=workout_data[0]["timestamp"].isoformat())
    ET.SubElement(lap, "TotalTimeSeconds").text = str(
        (workout_data[-1]["timestamp"] - workout_data[0]["timestamp"]).total_seconds()
    )
    ET.SubElement(lap, "DistanceMeters").text = str(workout_data[-1]["distance"] * 1000)
    ET.SubElement(lap, "Calories").text = "0"
    ET.SubElement(lap, "Intensity").text = "Active"
    ET.SubElement(lap, "TriggerMethod").text = "Manual"

    track = ET.SubElement(lap, "Track")
    for data in workout_data:
        trackpoint = ET.SubElement(track, "Trackpoint")
        ET.SubElement(trackpoint, "Time").text = data["timestamp"].isoformat()
        ET.SubElement(trackpoint, "DistanceMeters").text = str(data["distance"] * 1000)
        extensions = ET.SubElement(trackpoint, "Extensions")
        tpx = ET.SubElement(extensions, "TPX", xmlns="http://www.garmin.com/xmlschemas/ActivityExtension/v2")
        ET.SubElement(tpx, "Speed").text = str(data["speed"] / 3.6)

    os.makedirs("TCX", exist_ok=True)
    filename = f"TCX/workout_{workout_data[0]['timestamp'].strftime('%Y-%m-%d')}.tcx"
    tree = ET.ElementTree(root)
    tree.write(filename, encoding="utf-8", xml_declaration=True)
    print(f"Workout data saved to {filename}")

if __name__ == "__main__":
    initial_speed = 8.0
    routine = [
        (5, 8.0),
        (5, 8.5),
        (4, 9.0),
        (4, 9.5),
        (3, 10.0),
        (3, 10.5),
        (2, 11.0),
        (2, 11.5),
        (1, 12.0),
        (1, 12.5)
    ]
    video_path = 'path_to_your_video.mp4'
    asyncio.run(exercise_routine(initial_speed, routine, video_path))
--- End of RunRoutine.py ---

[Folder] __pycache__/
[Folder] advice/
[File] fitencode.py
--- Start of fitencode.py ---
import struct
from datetime import datetime

class FitEncoder:
    def __init__(self):
        self.records = []

    def write_file_header(self):
        header = struct.pack('<2BHI4s', 14, 16, 0, 0, b'.FIT')
        self.records.append(header)

    def write_session_message(self, start_time, end_time):
        start_time = int((start_time - datetime(1989, 12, 31)).total_seconds())
        end_time = int((end_time - datetime(1989, 12, 31)).total_seconds())
        session_message = struct.pack('<4s2I', b'SESS', start_time, end_time)
        self.records.append(session_message)

    def write_lap_message(self, start_time, end_time):
        start_time = int((start_time - datetime(1989, 12, 31)).total_seconds())
        end_time = int((end_time - datetime(1989, 12, 31)).total_seconds())
        lap_message = struct.pack('<4s2I', b'LAP', start_time, end_time)
        self.records.append(lap_message)

    def write_record_message(self, timestamp, speed, distance, incline):
        timestamp = int((timestamp - datetime(1989, 12, 31)).total_seconds())
        record_message = struct.pack('<4sI3f', b'REC', timestamp, speed, distance, incline)
        self.records.append(record_message)

    def write_file(self, filename):
        with open(filename, 'wb') as f:
            for record in self.records:
                f.write(record)
--- End of fitencode.py ---

[File] list_directory.py
--- Start of list_directory.py ---
import os

# Define the file extensions to include
INCLUDED_EXTENSIONS = {'.json', '.py', '.css', '.js', '.html'}

def write_directory_contents(output_file, current_path, indent_level=0):
    indent = '    ' * indent_level
    try:
        entries = sorted(os.listdir(current_path))
    except PermissionError:
        output_file.write(f"{indent}[Permission Denied]: {current_path}\n")
        return

    for entry in entries:
        full_path = os.path.join(current_path, entry)
        if os.path.isdir(full_path):
            output_file.write(f"{indent}[Folder] {entry}/\n")
            write_directory_contents(output_file, full_path, indent_level + 1)
        elif os.path.isfile(full_path):
            _, ext = os.path.splitext(entry)
            if ext.lower() in INCLUDED_EXTENSIONS:
                output_file.write(f"{indent}[File] {entry}\n")
                try:
                    with open(full_path, 'r', encoding='utf-8', errors='replace') as file:
                        content = file.read()
                        output_file.write(f"{indent}--- Start of {entry} ---\n")
                        for line in content.splitlines():
                            output_file.write(f"{indent}{line}\n")
                        output_file.write(f"{indent}--- End of {entry} ---\n\n")
                except Exception as e:
                    output_file.write(f"{indent}[Error reading file]: {e}\n")

def main():
    output_filename = 'directory_contents.txt'
    with open(output_filename, 'w', encoding='utf-8') as output_file:
        start_path = os.getcwd()
        output_file.write(f"Directory structure and file contents of: {start_path}\n\n")
        write_directory_contents(output_file, start_path)

if __name__ == "__main__":
    main()
--- End of list_directory.py ---

[Folder] music/
[Folder] routines/
[File] routines.json
--- Start of routines.json ---
{
    "p1": [
        [5, 0],
        [5, 8],
        [4, 0],
        [4, 1.0],
        [3, 0],
        [3, 1.5],
        [2, 0],
        [2, 2.0],
        [1, 0],
        [1, 2.5]
    ],
    "long_pillars": [
        [6, 0],
        [6, 0.5],
        [5, 0],
        [5, 1.0],
        [4, 0],
        [4, 1.5],
        [3, 0],
        [3, 2.0],
        [2, 0],
        [2, 2.5],
        [1, 0],
        [2, 3]
    ]
}
--- End of routines.json ---

[File] treadmill_control - Pretest.py
--- Start of treadmill_control - Pretest.py ---
# treadmill_control.py
import asyncio
from bleak import BleakScanner, BleakClient

ftms_service_uuid = "00001826-0000-1000-8000-00805f9b34fb"
control_point_uuid = "00002AD9-0000-1000-8000-00805f9b34fb"
treadmill_data_uuid = "00002ACD-0000-1000-8000-00805f9b34fb"

class TreadmillControl:
    def __init__(self):
        self.client = None

    async def connect(self):
        devices = await BleakScanner.discover(return_adv=True)
        treadmill = None
        for device, adv_data in devices.values():
            if ftms_service_uuid in adv_data.service_uuids:
                treadmill = device
                break
        if treadmill:
            self.client = BleakClient(treadmill.address)
            await self.client.connect()
        else:
            raise Exception("No FTMS treadmill found.")

    async def disconnect(self):
        if self.client:
            await self.client.disconnect()

    async def request_control(self):
        await self.client.write_gatt_char(control_point_uuid, bytearray([0x00]))
        await self.wait_for_response()

    async def set_speed(self, speed_kmh):
        speed_mph = round(speed_kmh / 1.59, 2)
        speed_value = int(speed_mph * 100).to_bytes(2, byteorder='little')
        await self.client.write_gatt_char(control_point_uuid, bytearray([0x02]) + speed_value)
        print(f"Set speed to {speed_kmh:.2f} km/h ({speed_mph:.2f} mph)")
        await self.wait_for_response()

    async def set_incline(self, incline):
        incline_value = int(incline * 10).to_bytes(2, byteorder='little', signed=True)
        await self.client.write_gatt_char(control_point_uuid, bytearray([0x03]) + incline_value)
        print(f"Set incline to {incline:.1f} %")
        await self.wait_for_response()

    async def wait_for_response(self):
        def handle_response(sender, data):
            op_code = data[0]
            request_op_code = data[1]
            result_code = data[2]
            if result_code == 0x01:
                print(f"Operation {request_op_code} succeeded")
            else:
                print(f"Operation {request_op_code} failed with result code {result_code}")

        await self.client.start_notify(control_point_uuid, handle_response)
        await asyncio.sleep(1)  # Wait for the response
        await self.client.stop_notify(control_point_uuid)

    async def start_monitoring(self, callback):
        if self.client:
            await self.client.start_notify(treadmill_data_uuid, callback)

    async def stop_monitoring(self):
        if self.client:
            await self.client.stop_notify(treadmill_data_uuid)

def parse_treadmill_data(data):
    flags = data[0]
    speed = int.from_bytes(data[2:4], byteorder='little') / 100.0
    distance = int.from_bytes(data[4:7], byteorder='little') / 100.0
    incline = None
    if flags & 0x08:  # Check if Inclination and Ramp Angle Setting Present bit is set
        incline = int.from_bytes(data[7:9], byteorder='little', signed=True) / 10.0
    return speed, distance, incline
--- End of treadmill_control - Pretest.py ---

[File] treadmill_control.py
--- Start of treadmill_control.py ---
# treadmill_control.py
import asyncio
from bleak import BleakScanner, BleakClient

ftms_service_uuid = "00001826-0000-1000-8000-00805f9b34fb"
control_point_uuid = "00002AD9-0000-1000-8000-00805f9b34fb"
treadmill_data_uuid = "00002ACD-0000-1000-8000-00805f9b34fb"

class TreadmillControl:
    def __init__(self, testing=True):
        self.client = None
        self.testing = testing
        self.current_speed = 0.0

    async def connect(self):
        if self.testing:
            print("Simulated connection to treadmill.")
            self.client = "SimulatedClient"  # Mock client to indicate connection
            return
        devices = await BleakScanner.discover(return_adv=True)
        treadmill = None
        for device, adv_data in devices.values():
            if ftms_service_uuid in adv_data.service_uuids:
                treadmill = device
                break
        if treadmill:
            self.client = BleakClient(treadmill.address)
            await self.client.connect()
        else:
            raise Exception("No FTMS treadmill found.")

    async def disconnect(self):
        if self.testing:
            print("Simulated disconnection from treadmill.")
            self.client = None
            return
        if self.client:
            await self.client.disconnect()

    async def request_control(self):
        if self.testing:
            print("Simulated control request.")
            return
        await self.client.write_gatt_char(control_point_uuid, bytearray([0x00]))
        await self.wait_for_response()

    async def set_speed(self, speed_kmh):
        self.current_speed = speed_kmh
        if self.testing:
            speed_mph = round(speed_kmh / 1.59, 2)
            print(f"Simulated setting speed to {speed_kmh:.2f} km/h ({speed_mph:.2f} mph)")
            return
        speed_mph = round(speed_kmh / 1.59, 2)
        speed_value = int(speed_mph * 100).to_bytes(2, byteorder='little')
        await self.client.write_gatt_char(control_point_uuid, bytearray([0x02]) + speed_value)
        print(f"Set speed to {speed_kmh:.2f} km/h ({speed_mph:.2f} mph)")
        await self.wait_for_response()

    async def set_incline(self, incline):
        if self.testing:
            print(f"Simulated setting incline to {incline:.1f} %")
            return
        incline_value = int(incline * 10).to_bytes(2, byteorder='little', signed=True)
        await self.client.write_gatt_char(control_point_uuid, bytearray([0x03]) + incline_value)
        print(f"Set incline to {incline:.1f} %")
        await self.wait_for_response()

    async def wait_for_response(self):
        if self.testing:
            print("Simulated waiting for response.")
            return

        def handle_response(sender, data):
            op_code = data[0]
            request_op_code = data[1]
            result_code = data[2]
            if result_code == 0x01:
                print(f"Operation {request_op_code} succeeded")
            else:
                print(f"Operation {request_op_code} failed with result code {result_code}")

        await self.client.start_notify(control_point_uuid, handle_response)
        await asyncio.sleep(1)  # Wait for the response
        await self.client.stop_notify(control_point_uuid)

    async def start_monitoring(self, callback):
        if self.testing:
            print("Simulated start monitoring.")
            # Simulate data
            async def simulate_data():
                while True:
                    speed_value = int(self.current_speed * 100).to_bytes(2, byteorder='little')
                    data = bytearray([0x08, 0x00]) + speed_value + bytearray([0x00, 0x00, 0x00, 0x00, 0x0A, 0x00])
                    callback(None, data)
                    await asyncio.sleep(1)
            asyncio.create_task(simulate_data())
            return
        if self.client:
            await self.client.start_notify(treadmill_data_uuid, callback)

    async def stop_monitoring(self):
        if self.testing:
            print("Simulated stop monitoring.")
            return
        if self.client:
            await self.client.stop_notify(treadmill_data_uuid)

    async def increase_speed(self):
        await self.set_speed(self.current_speed + 0.5)

    async def decrease_speed(self):
        await self.set_speed(self.current_speed - 0.5)

def parse_treadmill_data(data):
    flags = data[0]
    speed = int.from_bytes(data[2:4], byteorder='little') / 100.0
    distance = int.from_bytes(data[4:7], byteorder='little') / 100.0
    incline = None
    if flags & 0x08:  # Check if Inclination and Ramp Angle Setting Present bit is set
        incline = int.from_bytes(data[7:9], byteorder='little', signed=True) / 10.0
    return speed, distance, incline
--- End of treadmill_control.py ---

[File] user_config.json
--- Start of user_config.json ---
{
  "best_5k_time_minutes": 30.0
}
--- End of user_config.json ---

[File] video_playback.py
--- Start of video_playback.py ---
import cv2
import asyncio
import queue
import time

async def play_video(video_path, speed_ratio_queue, speed_queue, distance_queue, start_time):
    cap = cv2.VideoCapture(video_path)
    last_known_speed = 0.0  # Initialize last known speed
    last_known_distance = 0.0  # Initialize last known distance

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        if not speed_ratio_queue.empty():
            speed_ratio = speed_ratio_queue.get()
        if not speed_queue.empty():
            last_known_speed = speed_queue.get()  # Update last known speed
        if not distance_queue.empty():
            last_known_distance = distance_queue.get()  # Update last known distance

        # Display the last known speed as HUD (top left)
        hud_speed_text = f"{last_known_speed:.1f} km/h"
        cv2.putText(frame, hud_speed_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

        # Display the distance completed as HUD (top right)
        hud_distance_text = f"{last_known_distance:.2f} km"
        cv2.putText(frame, hud_distance_text, (frame.shape[1] - 200, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

        # Display the elapsed time as HUD (bottom left)
        elapsed_time = time.time() - start_time
        hud_time_text = f"Time: {int(elapsed_time // 60)}:{int(elapsed_time % 60):02d}"
        cv2.putText(frame, hud_time_text, (10, frame.shape[0] - 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

        cv2.imshow('Video', frame)
        if cv2.waitKey(int(1000 / (30 * speed_ratio))) & 0xFF == ord('q'):
            break
        await asyncio.sleep(0)  # Yield control to the event loop
    cap.release()
    cv2.destroyAllWindows()
--- End of video_playback.py ---

[Folder] videos/
[File] virtual_competitors.py
--- Start of virtual_competitors.py ---
import random
from datetime import timedelta

def generate_competitor_profiles(user_duration_min, user_avg_speed, num_competitors=3):
    strategies = ["even", "positive_split", "negative_split", "mid_surge", "random"]
    competitors = []
    for i in range(num_competitors):
        variation = random.uniform(-0.05, 0.05)  # ±5% duration variation
        comp_time = user_duration_min * (1 + variation)
        comp_avg_speed = user_avg_speed * (user_duration_min / comp_time)  # Adjust speed to match new time
        strategy = random.choice(strategies)
        competitors.append({
            "name": f"Ghost {chr(65+i)}",
            "duration_min": comp_time,
            "avg_speed": comp_avg_speed,
            "strategy": strategy
        })
    return competitors

def generate_speed_profile(duration_min, avg_speed, strategy):
    segments = 10
    segment_duration = duration_min * 60 / segments
    speed_profile = []

    if strategy == "even":
        for i in range(segments):
            speed_profile.append((i * segment_duration, avg_speed))
    elif strategy == "positive_split":
        for i in range(segments):
            speed = avg_speed + (i / segments) * (avg_speed * 0.2)
            speed_profile.append((i * segment_duration, speed))
    elif strategy == "negative_split":
        for i in range(segments):
            speed = avg_speed - (i / segments) * (avg_speed * 0.2)
            speed_profile.append((i * segment_duration, speed))
    elif strategy == "mid_surge":
        for i in range(segments):
            speed = avg_speed * 1.2 if segments // 3 <= i < 2 * segments // 3 else avg_speed
            speed_profile.append((i * segment_duration, speed))
    elif strategy == "random":
        for i in range(segments):
            speed = random.uniform(avg_speed * 0.8, avg_speed * 1.2)
            speed_profile.append((i * segment_duration, speed))

    return speed_profile

def generate_competitors_with_profiles(user_duration_min, user_avg_speed, num_competitors=3):
    competitors = generate_competitor_profiles(user_duration_min, user_avg_speed, num_competitors)
    for competitor in competitors:
        competitor["speed_profile"] = generate_speed_profile(
            competitor["duration_min"],
            competitor["avg_speed"],
            competitor["strategy"]
        )
    return competitors

if __name__ == "__main__":
    user_duration_min = 30
    user_avg_speed = 10.0
    competitors = generate_competitors_with_profiles(user_duration_min, user_avg_speed)
    for competitor in competitors:
        print(f"Competitor: {competitor['name']}")
        print(f"Duration: {competitor['duration_min']:.2f} min")
        print(f"Average Speed: {competitor['avg_speed']:.2f} km/h")
        print(f"Strategy: {competitor['strategy']}")
        print("Speed Profile:")
        for timestamp, speed in competitor["speed_profile"]:
            print(f"{str(timedelta(seconds=timestamp))} — {speed:.2f} km/h")
        print()
--- End of virtual_competitors.py ---

[File] zwo_parser.py
--- Start of zwo_parser.py ---
import xml.etree.ElementTree as ET
import os

def parse_zwo_file(file_path, starting_speed):
    """
    Parses a single ZWO file and converts it into a routine format.
    Each interval's speed is calculated as (power * starting_speed),
    and the speed increment is (target_speed - starting_speed).
    """
    tree = ET.parse(file_path)
    root = tree.getroot()

    routine_name = root.find('name').text.strip()
    routine = []

    for block in root.find('workout'):
        duration_sec = int(block.attrib.get('Duration', 0))
        duration_min = duration_sec / 60

        if 'Power' in block.attrib:
            power = float(block.attrib['Power'])
        else:
            power_low = float(block.attrib.get('PowerLow', 0))
            power_high = float(block.attrib.get('PowerHigh', 0))
            power = (power_low + power_high) / 2

        target_speed = power * starting_speed
        speed_increment = target_speed - starting_speed
        routine.append((duration_min, speed_increment))

    return {routine_name: routine}

def load_all_zwo_routines(folder_path, starting_speed):
    """
    Loads all .zwo files in the given folder and returns a dictionary
    of routines using the starting speed as the 5k pace.
    """
    routines = {}
    for file in os.listdir(folder_path):
        if file.lower().endswith('.zwo'):
            full_path = os.path.join(folder_path, file)
            try:
                routines.update(parse_zwo_file(full_path, starting_speed))
            except Exception as e:
                print(f"Failed to parse {file}: {e}")
    return routines
--- End of zwo_parser.py ---

